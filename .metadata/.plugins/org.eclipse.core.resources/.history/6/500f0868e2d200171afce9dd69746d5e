package command;

import memento.Memento;
import receiver.Enregistreur;
import receiver.Manager;
import receiver.Moteur;
import state.State;

/**
 * Concrete Command Rejouer implementant l'interface Command
 * 
 * @author Alexis LE MASLE et Fanny PRIEUR
 *
 */
public class Rejouer implements Command {

	/**
	 * Nouvelle instance de l'enregistreur
	 * 
	 * @see Enregistreur
	 */
	private Enregistreur enregistreur;

	private Manager manager;

	private Moteur moteur;

	private RejouerMemento memento;

	/**
	 * Constructeur de la classe Rejouer
	 * 
	 * @param enregistreur
	 */
	public Rejouer(Enregistreur enregistreur, Manager manager) {
		this.enregistreur = enregistreur;
		this.manager = manager;
		this.moteur = manager.getMoteur();
	}

	/**
	 * Appel a la methode rejouer de l'enregistreur.
	 */
	public void execute() {
		enregistreur.rejouer();
		if (!manager.getPlay()) {
			State st = manager.getStateCourant();
			st.addMem(m);
			st.addCmd(this);
			manager.saveState();
		}

	}

	public class RejouerMemento implements Memento<RejouerMemento> {

		public RejouerMemento clone() {
			return new RejouerMemento();
		}

	}

	@Override
	public Memento<?> getMemento() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void setMemento(Memento<?> mem) {
		// TODO Auto-generated method stub

	}

	@Override
	public void setMoteur(Moteur moteur) {
		this.moteur = moteur;
	}

	@Override
	public Moteur getMoteur() {
		return moteur;
	}

	@Override
	public Command clone() {
		return null;
	}

}
